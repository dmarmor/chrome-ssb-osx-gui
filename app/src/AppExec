#!/bin/bash
#
#  AppExec: Run an Epichrome app
#
#  Copyright (C) 2020  David Marmor
#
#  https://github.com/dmarmor/epichrome
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#


# CORE APP INFO

# filled in by Makefile
SSBVersion='EPIVERSION'

# filled in by updateapp
SSBIdentifier=APPID
CFBundleDisplayName=APPDISPLAYNAME
CFBundleName=APPBUNDLENAME
SSBCustomIcon=APPCUSTOMICON
SSBCommandLine=APPCOMMANDLINE
SSBEngineType=APPENGINETYPE
APPENGINESOURCE
SSBEdited=APPEDITED

export SSBIdentifier SSBVersion CFBundleDisplayName CFBundleName SSBCommandLine \
       SSBEngineType SSBEngineSourceInfo SSBEdited


# CORE APP VARIABLES

myAppPath="${BASH_SOURCE[0]%/Contents/Resources/script}"


# PARSE COMMAND-LINE ARGUMENTS

argsURIs=()
argsOptions=()
export argsURIs argsOptions
while [[ "$#" -gt 0 ]] ; do
    case "$1" in
        --epichrome-debug)
            debug=1
            ;;

	--epichrome-new-log)
	    myLogFile=
	    myLogTempVar=
	    myRunTimestamp=
	    ;;
	
	[hH][tT][tT][pP]'://'*|[hH][tT][tT][pP][sS]'://'*|[fF][tT][pP]'://'*|[fF][iI][lL][eE]'://'*)
	    # this should be sent to the open command
	    argsURIs+=( "$1" )
	    ;;

	*)
	    # pass any other options along to the engine
	    argsOptions+=( "$1" )
    esac

    # get next arg
    shift
done


# LOAD CORE SCRIPT

myLogID=   # reset log ID
source "$myAppPath/Contents/Resources/Scripts/core.sh" 'coreDoInit=1' || exit 1
[[ "$ok" ]] || abort

# ensure we have a data directory
[[ -d "$myDataPath" ]] || abort 'Unable to create data directory.'


# DON'T TRAP SIGINT

trap '' INT


# FUNCTION DEFINITIONS


# CLEANUP -- release any lock we've set
function cleanup {
    
    # release any lock
    [[ "$lockOn" ]] && lockrelease

    # clean up from any aborted update
    [[ "$(type -t updatecleanup)" = 'function' ]] && updatecleanup	
}


# LOCK FUNCTIONS

# lock file
myLockFile="$myDataPath/lock" ; export myLockFile

# (do NOT export these -- they should not be inherited)
lockOn=
lockPID=
lockLogFile=
lockCmd=
lockEnginePID=
lockEngineCmd=
lockEnginePath=

# LOCKSET -- set a lock file, or fail if it's already set
function lockset {

    # only run if we're OK
    [[ "$ok" ]] || return 1

    # error: lock variable is already set
    if [[ "$lockOn" ]] ; then
	errmsg='Lock variable is already set.'
	ok=
	return 1
    fi

    # check if there's already a lock file in place
    if [[ -f "$myLockFile" ]] ; then

	# read the existing lock file
	safesource "$myLockFile" 'lock'
	[[ "$ok" ]] || return 1

	if [[ "$lockPID" = "$$" ]] ; then

	    # error: this is already our lock
	    errmsg='Lock is already set.'
	    ok=
	    return 1

	else

	    local curCmd=

	    # if lock's app (or helper) is still alive, we fail
	    if kill -0 "$lockPID" 2> /dev/null ; then

		# see if the command for the lock PID matches the lock command
		getlockcmd "$lockPID" curCmd
		if [[ "$curCmd" = "$lockCmd" ]] ; then
		    debuglog "Can't set lock: this app (or its helper) is alive at $lockPID."
		    return 1
		fi
	    fi

	    # if the lock's engine is still alive, we fail
	    if kill -0 "$lockEnginePID" 2> /dev/null ; then

		# see if the command for the lock engine PID matches the lock engine command
		getlockcmd "$lockEnginePID" curCmd
		if [[ "$curCmd" = "$lockEngineCmd" ]] ; then
		    debuglog "Can't set lock: This app's engine is alive at $lockEnginePID."
		    return 1
		fi
	    fi
	fi
    fi

    # if we got here, there's either no lock, or we can stomp on an old one

    # initialize log file
    initlogfile
    
    # set lock variables and write out lock
    lockPID="$$" ; lockLogFile="$myLogFile"
    lockEnginePID= ; lockEngineCmd= ; lockEnginePath=
    getlockcmd "$lockPID" lockCmd
    writevars "$myLockFile" lockPID lockLogFile lockCmd \
	      lockEnginePID lockEngineCmd lockEnginePath
    [[ "$ok" ]] || return 1

    # return success
    debuglog "Lock set."
    lockOn=1
    return 0
}


# LOCKRELEASE -- release a lock file
function lockrelease {

    if [[ "$lockOn" ]] ; then

	# release lock variable
	lockOn=

	if [[ -f "$myLockFile" ]] ; then

	    # command to delete lock file
	    local myCommand=( /bin/rm -f "$myLockFile" )

	    debuglog "Deleting lock."

	    if [[ "$ok" ]] ; then

		# error is non-fatal
		try "${myCommand[@]}" 'Unable to delete old lock file.'
		if [[ ! "$ok" ]] ; then
		    ok=1 ; errmsg=
		fi

	    else
		tryalways "${myCommand[@]}" 'Unable to delete old lock file.'
	    fi

	    return 0
	else

	    # no lock file found
	    debuglog "Lock file not found."
	    return 1
	fi

    else

	# no lock set
	debuglog "No lock set."
	return 1
    fi
}
export -f lockrelease


# GETLOCKCMD -- get the ps listing for a PID
function getlockcmd {  # ( pid var )

    # arguments
    local pid="$1" ; shift
    local var="$1" ; shift

    # try to get pid
    local psOutput=()
    try 'psOutput=(n)' /bin/ps -o command -p "$pid" \
	"Unable to get process info for PID $pid."

    if [[ "$ok" ]] ; then
	eval "${var}=\"\${psOutput[1]}\""
    else
	eval "${var}="
	ok=1 ; errmsg=
    fi
}
export -f getlockcmd


# MAIN BODY

# if we abort early, don't try to write config
doAbortWriteconfig=


# OBTAIN LOCK OR HAND OFF TO RUNNING ENGINE

if ! lockset ; then

    # lock already in use -- see if it's a live engine
    if kill -0 "$lockEnginePID" 2> /dev/null ; then

	# direct logging to running app's log file
	initlogfile "$lockLogFile"
	
	# engine is already running, so just send any files or URLs to it &
	# don't run the usual command-line
	debuglog "Activating already-running engine at '$lockEnginePath'"
	try /usr/bin/open -a "$lockEnginePath" "${argsURIs[@]}" \
	    'Unable to connect to running app engine.'

	# we're done, so exit one way or the other
	[[ "$ok" ]] && cleanexit || abort
    else
	
	# locked but not with a running engine, so log error & quit
	abortsilent 'Unable to set lock.'
    fi
fi


# ENGINE IS NOT RUNNING -- PREPARE TO LAUNCH ENGINE


# LOAD LAUNCH FUNCTIONS

safesource "$myAppPath/Contents/Resources/Scripts/launch.sh"
[[ "$ok" ]] || abort


# READ CURRENT APP SETTINGS

# add extra config vars for external engine
[[ "${SSBEngineType%%|*}" != internal ]] && appConfigVars+=( SSBEngineSourceInfo )

# read config file (if any)
if [[ -f "$myConfigFile" ]] ; then
    
    # if we're running an internal engine, don't let config.sh override SSBEngineSourceInfo
    tempEngInfo=
    [[ "${SSBEngineSourceInfo[*]}" ]] && tempEngInfo=( "${SSBEngineSourceInfo[@]}" )

    # read config file
    readconfig "$myConfigFile"
    [[ "$ok" ]] || abort

    # restore SSBEngineSourceInfo if needed
    if [[ "${tempEngInfo[*]}" ]] ; then
	debuglog 'Overriding SSBEngineSourceInfo from config.sh with built-in value.'
	SSBEngineSourceInfo=( "${tempEngInfo[@]}" )
    fi
    
else
    debuglog "No configuration file found."
fi


# APP STATUS VARIABLES

myStatusNewApp=        # on new app, this is set
myStatusNewVersion=    # on update, this contains old version
myStatusEdited=        # on first run of an edited app, this is set
myStatusFixRuntime=    # set by updateprofiledir to a copy of Epichrome Helper settings if we need to preserve them
myStatusEngineMoved=   # set if app engine needs to move
myStatusEngineChange=  # on engine change, this contains old engine info
myStatusReset=         # set if app settings appear to have been reset
myStatusWelcomeURL=    # set by setwelcomepage if welcome page should be shown
myStatusWelcomeTitle=  # title for URL bookmark


# DETERMINE IF THIS IS A NEW APP OR FIRST RUN ON A NEW VERSION

if [[ "$SSBVersion" != "$SSBLastRunVersion" ]] ; then

    if [[ "$SSBLastRunVersion" ]] ; then

	# updated app
	myStatusNewVersion="$SSBLastRunVersion"

    else

	# new app
	myStatusNewApp=1

    fi

    # update last run variables
    SSBLastRunVersion="$SSBVersion"
    SSBUpdateVersion="$SSBVersion"

    # clear error states
    SSBNMHInstallError=
    SSBUpdateCheckError=
fi


# DETERMINE IF THIS IS FIRST RUN OF AN EDITED APP

if [[ "$SSBEdited" && \
	  ( ( ! "$SSBLastRunEdited" ) || \
		( "$SSBEdited" -gt "$SSBLastRunEdited" ) ) ]] ; then
    myStatusEdited=1
fi

# update last run variable
SSBLastRunEdited="$SSBEdited"


# DETERMINE IF WE'VE JUST CHANGED ENGINES

if [[ ( ! "$myStatusNewApp" ) && \
	  ( "$SSBLastRunEngineType" && \
		( "${SSBEngineType#*|}" != "${SSBLastRunEngineType#*|}" ) ) ]] ; then
    
    # mark engine change
    getbrowserinfo myStatusEngineChange "${SSBLastRunEngineType#*|}"
    myStatusEngineChange[0]="$SSBLastRunEngineType"

    # clear extension install error state
    SSBNMHInstallError=

fi

# update last-run engine
SSBLastRunEngineType="$SSBEngineType"


# DETERMINE IF SETTING HAVE BEEN RESET

[[ -e "$myFirstRunFile" && -e "$myPreferencesFile" ]] || \
    myStatusReset=1


# UPDATE APP PATH

SSBAppPath="$myAppPath"


# if we got this far, we should write out any new config even on abort
doAbortWriteconfig=1


# GET EPICHROME INFO

getepichromeinfo


# UPDATE ENGINE PATH

# determine where our engine should be
myEnginePath=

# start with Epichrome.app location
if [[ -d "$epiCurrentPath" ]] ; then
    myEnginePath="$epiCurrentPath"
elif [[ -d "$epiLatestPath" ]] ; then
    myEnginePath="$epiLatestPath"
else
    # last ditch -- use default install location
    myEnginePath='/Applications/Epichrome/Epichrome.app'
fi

# get directory path
myEnginePath="${myEnginePath%/*}/$appEnginePathBase"

# determine if path is in our user path
if [[ "${myEnginePath::${#HOME}}" = "$HOME" ]] ; then
    # path is user-level, so just add our app ID
    myEnginePath+="/$SSBIdentifier"
else
    # path is root-level, so add our user ID & app ID
    myEnginePath+="/$USER/$SSBIdentifier"
fi

# check if engine path matches what it should be
if [[ "$SSBEnginePath" != "$myEnginePath" ]] ; then
    
    # engine path is out of date, so we'll recreate it
    debuglog "Engine path '$SSBEnginePath' is out of date. Removing."

    # delete old engine
    [[ -d "$SSBEnginePath" ]] && deleteengine

    # set status variable
    myStatusEngineMoved="$SSBEnginePath"
    
    # set new engine path
    SSBEnginePath="$myEnginePath"
fi

# subsidiary paths
myEnginePayloadPath="$SSBEnginePath/Payload"
myEnginePlaceholderPath="$SSBEnginePath/Placeholder"
export myEnginePayloadPath myEnginePlaceholderPath


# UPDATE ENGINE APP NAME

# regex for pulling out current app name
appNameRe='/([^/]+)\.[aA][pP][pP]$'

# try to use current name of this Epichrome app as engine name
if [[ "$SSBAppPath" =~ $appNameRe ]] ; then
    SSBEngineAppName="${BASH_REMATCH[1]}.app"
else
    # if app name is unparsable, just use Info.plist display name
    SSBEngineAppName="${CFBundleDisplayName}.app"
fi

# rename engine app bundle
if [[ "$configSSBEngineAppName" && \
	  ( "$SSBEngineAppName" != "$configSSBEngineAppName" ) ]] ; then
    if [[ -d "$SSBEnginePath/$configSSBEngineAppName" ]] ; then
	try /bin/rm -rf "$SSBEnginePath/$SSBEngineAppName" \
	    'Unable to clear old engine app name.'
	try /bin/mv "$SSBEnginePath/$configSSBEngineAppName" "$SSBEnginePath/$SSBEngineAppName" \
	    'Unable to rename engine to match app name.'

	# an error here is non-fatal
	if [[ ! "$ok" ]] ; then
	    errlog "$errmsg"
	    ok=1 ; errmsg=

	    # set engine app name back to original
	    SSBEngineAppName="$configSSBEngineAppName"
	fi
    fi
fi

# get path to engine app bundle
myEngineAppPath="$SSBEnginePath/$SSBEngineAppName"
export myEngineAppPath


# CHECK FOR NEW EPICHROME ON SYSTEM AND OFFER TO UPDATE

# if there's no current Epichrome installed & we have a built-in engine,
# we need to force the update to be offered no matter what
noCurrentEpichrome=
[[ "$epiCurrentPath" || ( "${SSBEngineType%%|*}" != internal ) ]] || \
    noCurrentEpichrome=1

if [[ "$noCurrentEpichrome" || ! ( "$myStatusNewApp" || "$myStatusNewVersion" || "$myStatusEngineChange" ) ]] ; then
    
    checkappupdate "$noCurrentEpichrome"
    
    if [[ "$?" != 0 ]] ; then

	# abort on fatal error
	[[ "$ok" ]] || abort

	# display warning on non-fatal error
	alert "$errmsg Please try update again later." 'Unable to Update' '|caution'
	ok=1
	errmsg=
    fi

    # CHECK FOR NEW EPICHROME ON GITHUB AND OFFER TO DOWNLOAD

    checkgithubupdate

    # handle error
    if [[ ! "$ok" ]] ; then
	if [[ "$SSBUpdateCheckError" = "$errmsg" ]] ; then

	    # this is the second time we've had the same error, so show an alert
	    alert "Warning: Unable to check for new version of Epichrome on GitHub: $errmsg" \
		  'Checking For Update' '|caution'
	    
	    # don't show an alert for this error again
	    SSBUpdateCheckError="IGNORE|$errmsg"
	    
	elif [[ ( "${SSBUpdateCheckError:0:6}" != IGNORE ) || \
	      "${SSBUpdateCheckError#*|}" != "$errmsg" ]] ; then
	    
	    # new error, so if it comes up a second time, show an alert
	    SSBUpdateCheckError="$errmsg"
	fi
	
	# clear error state
	ok=1 ; errmsg=
    fi


    if [[ ! "$ok" ]] ; then
	alert "Warning: Unable to check for new version of Epichrome on GitHub: $errmsg (This error will only be reported once. All errors can be found in the app log.)" 'Checking For Update' '|caution'
	ok=1 ; errmsg=
    fi
fi


# IF USING EXTERNAL ENGINE, GET INFO

if [[ "${SSBEngineType%%|*}" != internal ]] ; then

    # try the path we've been using first
    [[ "${SSBEngineSourceInfo[$iPath]}" ]] && getextenginesrcinfo "${SSBEngineSourceInfo[$iPath]}"

    # if that fails, search the system for external engine
    [[ "${SSBEngineSourceInfo[$iPath]}" ]] || getextenginesrcinfo
fi


# PREPARE DATA DIRECTORY

# update the data directory
if ! updatedatadir ; then
    [[ "$ok" ]] && alert "$errmsg" 'Warning' '|caution'
fi
[[ "$ok" ]] || abort

# set any welcome page
setwelcomepage

# update the profile directory
if ! updateprofiledir ; then
    [[ "$ok" ]] && alert "$errmsg" 'Warning' '|caution'
fi
[[ "$ok" ]] || abort

# install native messaging host, reporting non-fatal errors
installnmh
if [[ ! "$ok" ]] ; then
    if [[ "$SSBNMHInstallError" != "$errmsg" ]] ; then

	# show warning alert for error installing native messaging host
	alert "Unable to install \"Epichrome Runtime\" extension. ($errmsg) Your app will work, but the extension won't." 'Warning' '|caution'

	# set new error state
	SSBExtensionInstallError="$errmsg"
    fi

    # clear error state
    ok=1 ; errmsg=
fi

# update links to compatible native messaging hosts, reporting non-fatal errors
if ! linkexternalnmhs ; then
    alert "Unable to link to native messaging hosts. Extensions that use native messaging may not work. ($errmsg)" 'Warning' '|caution'
    errmsg=
fi


# CREATE OR UPDATE ENGINE IF NECESSARY

# flag whether we need to (re)create the engine and/or activate it
doCreateEngine=
doNotActivateEngine=

if [[ "$myStatusNewApp" ]] ; then

    # new app, so of course we need an engine
    doCreateEngine=1
    debuglog "Creating engine for new app."
    createEngineErrMsg="Unable to create engine for new app"

elif [[ "$myStatusNewVersion" ]] ; then

    # app was updated, so we need a new engine
    doCreateEngine=1
    debuglog "Updating engine for new Epichrome version $SSBVersion."
    createEngineErrMsg="Unable to update engine for new Epichrome version $SSBVersion"

elif [[ "$myStatusEdited" ]] ; then

    # this app was edited, so we need a new engine
    doCreateEngine=1
    debuglog "Updating engine for edited app."
    createEngineErrMsg="Unable to update engine for edited app"

elif [[ "${myStatusEngineChange[0]}" ]] ; then

    # the app engine was changed, so we need a new engine (probably never reached)
    doCreateEngine=1
    debuglog "Updating engine for new app engine type."
    createEngineErrMsg="Unable to update engine to new type"

elif [[ "$myStatusEngineMoved" ]] ; then
    
    # the app engine was changed, so we need a new engine (probably never reached)
    doCreateEngine=1
    debuglog "Recreating engine in new location '$SSBEnginePath'."
    createEngineErrMsg="Unable to recreate engine in new location"
    
else

    # check the state of the engine
    checkengine OFF ; engineState="$?"

    # flag if engine is good but was left active
    if [[ "$engineState" = 1 ]] ; then
	doNotActivateEngine=1
    elif [[ "$engineState" = 2 ]] ; then
	doCreateEngine=1
	debuglog "Replacing damaged engine."
	createEngineErrMsg='Unable to replace damaged engine'
    fi
    # else engine is in the expected off state

    if [[ ( ! "$doCreateEngine" ) && ( "${SSBEngineType%%|*}" != internal ) ]] ; then

	# new version of external engine app
	if [[ "${SSBEngineSourceInfo[$iVersion]}" && \
		  ( "${SSBEngineSourceInfo[$iVersion]}" != "${configSSBEngineSourceInfo[$iVersion]}" ) ]] ; then

	    doCreateEngine=1
	    debuglog "Updating engine to ${SSBEngineSourceInfo[$iDisplayName]} version ${SSBEngineSourceInfo[$iVersion]}."
	    createEngineErrMsg="Unable to update engine to ${SSBEngineSourceInfo[$iDisplayName]} version ${SSBEngineSourceInfo[$iVersion]}."
	fi
    fi
fi
[[ "$ok" ]] || abort

# create engine if necessary
if [[ "$doCreateEngine" ]] ; then

    # if engine was left activated, deactivate it before re-creating
    if [[ "$doNotActivateEngine" ]] ; then
	setenginestate OFF
	doNotActivateEngine=
    fi

    # (re)create engine
    createengine
    [[ "$ok" ]] || abort "$createEngineErrMsg: $errmsg"
fi


# ACTIVATE ENGINE (IF NECESSARY)

if [[ ! "$doNotActivateEngine" ]] ; then
    setenginestate ON
fi
[[ "$ok" ]] || abort


# UPDATE/CREATE ENGINE MANIFEST IF NECESSARY

updateenginemanifest

# report non-fatal error
if [[ ! "$ok" ]] ; then
    alert "Unable to create engine info manifest. ($errmsg) The Epichrome extension may not work." 'Warning' '|caution'
    ok=1 ; errmsg=
fi


# UPDATE/CREATE CENTRAL NATIVE MESSAGING HOST MANIFESTS

if [[ "${SSBEngineSourceInfo[$iName]}" = Brave ]] ; then

    updatecentralnmh

    if [[ ! "$ok" ]] ; then
	alert "Unable to install central native messaging host manifests. ($errmsg) The Epichrome extension may not work." \
	      'Warning' '|caution'
	ok=1 ; errmsg=
    fi
fi


# PREPARE APP FOR LAUNCH

# build command line
myEngineArgs=( "${argsOptions[@]}" \
		   '--no-default-browser-check' \
		   "${SSBEngineSourceInfo[@]:$iArgs}" \
		   "${SSBCommandLine[@]}" )

# temporarily install master prefs if needed
masterPrefsSet=
setmasterprefs
if [[ "$ok" ]] ; then
    masterPrefsSet=1
else
    alert "Unable to initialize app settings. ($errmsg) Some app settings may need to be adjusted." \
	  'Warning' '|caution'
    ok=1 ; errmsg=
fi


# LAUNCH ENGINE

launchapp "$myEngineAppPath" "${SSBEngineSourceInfo[$iExecutable]}" "app engine" \
	  "${argsURIs[@]}" \
	  --args "--user-data-dir=$myProfilePath" "${myEngineArgs[@]}"
ok=1 ; errmsg=

# start collecting post-launch errors
errPostLaunch=
launchFailed=


# UNINSTALL MASTER PREFS (IF INSTALLED)

if [[ "$masterPrefsSet" ]] ; then
    
    clearmasterprefs

    # errors clearing master prefs are nonfatal
    if [[ ! "$ok" ]] ; then
	ok=1 ; errmsg=
    fi
fi


# LAUNCH CLEANUP PROCESS

# get PID of running engine
function checkforengine {
    getengineinfo "$myEngineAppPath" || return 0
    [[ "$myEnginePID" ]] && return 0
    return 1
}
waitforcondition 'app engine to launch' 5 .5 checkforengine
unset -f checkforengine

if [[ "$myEnginePID" ]] ; then

    # engine PID found, so launch helper
    launchhelper Cleanup
    
    # if helper didn't launch successfully, store the error
    if [[ ! "$ok" ]] ; then
	errPostLaunch="$errmsg The app engine will not be deactivated upon quitting."
	ok=1 ; errmsg=
    fi
    
    # disown our lock
    debuglog 'Leaving lock in place for Epichrome Helper.'
    lockOn=
else

    # PID not found, so create error message
    [[ "$errmsg" ]] && errPostLaunch="$errmsg "
    errPostLaunch+="The app may not have launched properly. If it did, the engine will not be properly cleaned up upon quitting."
    launchFailed=1

    # delete failed engine
    deleteengine
fi


# UPDATE CONFIG FILE IF NECESSARY

writeconfig "$myConfigFile"
if [[ ! "$ok" ]] ; then
    if [[ "$errPostLaunch" ]] ; then
	errPostLaunch="$errmsg Also: $errPostLaunch"
    else
	errPostLaunch="$errmsg"
    fi
    ok=1 ; errmsg=
fi


# SHOW WELCOME PAGE IF NEEDED

if [[ "$myEnginePID" && "$myStatusWelcomeURL" ]] ; then

    # if we're updating from pre-2.3.0b10, show extra popup alert
    if [[ "$myStatusNewApp" ]] || \
	   ( [[ "$myStatusNewVersion" ]] && vcmp "$myStatusNewVersion" '<' '2.3.0b10' ) ; then
	myStatusWelcomeURL+='&m=1'
    fi
    
    # pause to allow the app to open
    waitforcondition 'app to open' 5 .5 test -L "$myProfilePath/RunningChromeVersion"

    debuglog "Showing welcome page ($myStatusWelcomeURL)."
    
    # launch the welcome page
    try '-1' "$myEngineAppPath/Contents/MacOS/${SSBEngineSourceInfo[$iExecutable]}" \
	"--user-data-dir=$myProfilePath" "$myStatusWelcomeURL" \
	'Unable to open welcome page.'
    
    # save any error
    if [[ ! "$ok" ]] ; then
	[[ "$errPostLaunch" ]] && errPostLaunch+=' Also: '
	errPostLaunch+="$errmsg You may need to install Epichrome Helper and other extensions manually. If you've just updated the app or changed the engine, other settings may be lost."
	ok=1 ; errmsg=
    fi
fi


# SAVE LOST RUNTIME EXTENSION SETTINGS IF NEEDED

if [[ "${myStatusFixRuntime[0]}" ]] ; then
    
    # give the app 5 seconds to delete the runtime extension settings
    waitforcondition 'app to delete Epichrome Helper settings' \
		     5 .5 test '!' -d "${myStatusFixRuntime[0]}"
    
    if [[ ! -d "${myStatusFixRuntime[0]}" ]] ; then
	
	debuglog "Restoring Epichrome Helper settings."
	
	# move copied settings back into place
	try /bin/mv "${myStatusFixRuntime[1]}" "${myStatusFixRuntime[0]}" \
	    'Unable to restore Epichrome Helper settings.'
	if [[ ! "$ok" ]] ; then
	    [[ "$errPostLaunch" ]] && errPostLaunch+=' Also: '
	    errPostLaunch+="$errmsg After reinstalling Epichrome Helper, you will probably need to restore its settings from a backup or re-enter them."
	    ok=1 ; errmsg=
	fi
    else
	debuglog "No need to restore Epichrome Helper settings."
	
	# silently remove unused backup
	try /bin/rm -rf "${myStatusFixRuntime[1]}" \
	    'Unable to remove backup of Epichrome Helper settings.'
	ok=1 ; errmsg=
    fi
fi

# REPORT ANY POST-LAUNCH ERRORS

if [[ "$launchFailed" ]] ; then
    abort "$errPostLaunch"
elif [[ "$errPostLaunch" ]] ; then
    alert "$errPostLaunch" 'Warning' '|caution'
fi

# exit cleanly
cleanexit
