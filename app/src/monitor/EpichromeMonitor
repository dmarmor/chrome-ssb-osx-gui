#!/bin/bash
#
#  EpichromeHelper: Helper app to clean up engines & relaunch updated apps
#
#  Copyright (C) 2020  David Marmor
#
#  https://github.com/dmarmor/epichrome
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 


# IMMEDIATELY FORK SO THAT /usr/bin/open WILL RETURN

# update log name
myLogID="${myLogID%|*}|$epiHelperMode"

if [[ "$epiHelperMode" =~ ^Start(.+)$ ]] ; then
    epiHelperMode="${BASH_REMATCH[1]}"
    debuglog "Forking child daemon..."
    "$0" "$@" &
    cleanexit
fi


# FUNCTION DEFINITIONS


# HANDLE PREMATURE EXIT
coreEarlyExitMsg='Engine will not be deactivated.'


# LOCKREPLACE -- replace a lock set by the parent app
lockOn=
function lockreplace { # ( replacePID )

    # only run if we're OK
    [[ "$ok" ]] || return 1
	
    # PID of lock we want to replace
    local replacePID="$1" ; shift
    
    # assume lock is not already on
    lockOn=
    
    # check if there's already a lock file in place    
    if [[ -f "$myLockFile" ]] ; then
	
	# read the existing lock file
	safesource "$myLockFile" 'lock'
	[[ "$ok" ]] || return 1	    
	
	# if this is the right lock, replace it
	if [[ "$replacePID" = "$lockPID" ]] ; then

	    debuglog "Taking over lock from PID $replacePID."
	    
	    local lockPID="$$"
	    local lockCmd= ; getlockcmd "$lockPID" lockCmd
	    local lockEnginePID="$myEnginePID"
	    local lockEngineCmd= ; getlockcmd "$lockEnginePID" lockEngineCmd
	    local lockEnginePath="$myEngineCanonicalPath"
	    writevars "$myLockFile" lockPID lockLogFile lockCmd \
		      lockEnginePID lockEngineCmd lockEnginePath
	    [[ "$ok" ]] || return 1
	    lockOn=1
	    return 0
	else
	    
	    # replacement PID doesn't match lock PID
	    ok= ; errmsg="Incorrect lock info."
	    return 1
	fi
	
    else
	
	# we're supposed to be replacing a lock, but none in place
	ok= ; errmsg="No lock found."
	return 1
    fi
    
    return 1
}


# MAIN BODY

if [[ "$epiHelperMode" = Relaunch ]] ; then

    # RELAUNCH MODE

    # array variables from parent app
    importarray argsURIs argsOptions
    
    # wait for parent to quit
    debuglog "Waiting for parent app (PID $epiHelperParentPID) to quit..."
    while kill -0 "$epiHelperParentPID" 2> /dev/null ; do
	pause 1
    done

    # relaunch
    debuglog "Parent app has quit. Relaunching..."
    
    launchapp "$SSBAppPath" 'Epichrome' 'updated app' \
	      "${argsURIs[@]}" --args "${argsOptions[@]}" --epichrome-new-log
    
    # report launch error
    if [[ "$ok" ]] ; then
	debuglog "Parent app relaunched successfully. Quitting."
    else
	alert "$errmsg You may have to launch it manually." 'Warning' '|caution'
    fi
    
    # exit
    cleanexit
    
else
    # CLEANUP MODE

    # array variables from parent app
    importarray SSBEngineSourceInfo
    
    # replace parent app's lock
    lockreplace "$epiHelperParentPID" || \
	abort "Unable to acquire lock. ($errmsg) The app engine will not be deactivated upon quitting."
    
    # wait for app to exit
    debuglog "Waiting for engine to quit..."
    while kill -0 "$myEnginePID" 2> /dev/null ; do
	pause 1
    done

    # deactivate engine and quit
    debuglog 'Engine has quit. Cleaning up...'

    # assume success
    myResult=0
	
    # check engine state
    checkengine ON ; engineState="$?"
    
    if [[ "$engineState" = 0 ]] ; then

	# deactivate engine
	setenginestate OFF
	
	if [[ "$ok" ]] ; then
	    debuglog "Deactivation complete."
	else
	    # error deactivating engine
	    myResult=1
	fi
    elif [[ "$engineState" = 2 ]] ; then
	
	# bad engine state
	errlog "Engine is in an unknown state or damaged. Unable to deactivate."
	myResult=1
	
    else
	
	# engine is already off, so do nothing
	errlog "Engine is unexpectedly already deactivated."
    fi

    # release lock & exit
    lockrelease
    cleanexit "$myResult"
fi
